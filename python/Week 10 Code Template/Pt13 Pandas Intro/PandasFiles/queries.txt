#read first 10 records 
print(w_fcast.head(10))
#read last 10 records 
print(w_fcast.tail(10))
w_fcastTxt = pd.read_csv('/Users/Abdulmalik/Documents/Programming/DataFiles/text/test.txt', delimiter='\t')
#read headers
print(w_fcast.columns)

#read each column 
print(w_fcast['Reading Timestamp'])
print(w_fcast[['Reading Timestamp','Ambient Temp','Ground Temp']])

#read each row 
print(w_fcast.iloc[1])
#read specific rows 1 - 4
print(w_fcast.iloc[0:4])
print(w_fcast.iloc[1:4])
#read a specific location (R,C)
print(w_fcast.iloc[2,0])
print(w_fcast.iloc[2,1])
print(w_fcast.iloc[2,2])
#iterate through  records
for index, row in w_fcast.iterrows():
    print(index,row)

for index, row in w_fcast.iterrows():
    print(index,row['Reading Timestamp'])


for index, row in w_fcast.iterrows():
    print(index,row['Humidity'])  
# use loc to find a specific data base on textual or numerical info
print(w_fcast.loc[w_fcast['Player name'] == "SharkDragon"])
print(w_fcast.loc[w_fcast[' Player score'] == 8])
print(w_fcast.loc[w_fcast["Ground Temp"] ==12.63])
#search and display data for specific record(s)
score = int(input("Enter player score to search for: "))
print(w_fcast.loc[w_fcast[" Player score"] ==score])
#describe method will show any formula used in the read_csv
print(w_fcast.describe)
#sort values
print(w_fcast.sort_values('Ambient Temp'))
print(w_fcast.head(10).sort_values('Ambient Temp'))
print(w_fcast.head(10).sort_values('Ambient Temp', ascending=True))
print(w_fcast.sort_values('Ambient Temp', ascending=False))
print(w_fcast.sort_values('Ambient Temp', ascending=True))
print(w_fcast.head(10).sort_values(['Ambient Temp', 'Wind Speed']))
print(w_fcast.head(10).sort_values(['Ambient Temp', 'Wind Speed'], ascending=False))
print(w_fcast.head(10).sort_values(['Ambient Temp', 'Ground Temp'], ascending=[1,0]))
print(w_fcast.head(10).sort_values(['Ambient Temp', 'Ground Temp'], ascending=[1,1]))

#Add/total values from multiple column
w_fcast['Total Temp'] = w_fcast['Ambient Temp'] + w_fcast['Ground Temp']
print(w_fcast.head(5))

# use iloc = integer location first : means all rows starting from the first to last row, 
#Then the start and end columns to add together
# and sum method with the axis = 1 to add horizontally(left to right) or axis = 0 to add vertically(top
# to bottom)
w_fcast['Total Temps'] = w_fcast.iloc[:,1:3].sum(axis=1)
print(w_fcast.head(5))

# Add total from one column/field 
print('Total Ambient Temp',w_fcast['Ambient Temp'].sum(axis=0))
print('Total Ambient Temp',w_fcast['Ambient Temp'].sum(axis=0),'\nTotal Ground Temp',w_fcast['Ground Temp'].sum(axis=0))

#print all total excludin th first column(Reading Timestamp) at index position 0 
print(w_fcast.iloc[:,1:].sum()) 

#Write to /create 
w_fcast.to_csv('/Users/Abdulmalik/Documents/Programming/DataFiles/csv/modifedWeatherData1.csv', index=False)
w_fcast.to_csv('/Users/Abdulmalik/Documents/Programming/DataFiles/text/WeatherData.txt', index=False, sep='\t')
w_fcast.to_excel('/Users/Abdulmalik/Documents/Programming/DataFiles/excel/WeatherData.xlsx', index=False)


#query with the & operator 
print(temp.loc[(temp['Temp'] >=20) & (temp['Time'] >=1200)])

query with the | (or) operator 
temp = temp.loc[(temp['Temp'] >=12) | (temp['Time'] >=1200)]
print(temp)

#query with the & operator 
print(movies.loc[(movies['Rating'] == 'PG') & (movies['Genre'] == 'Action')])
query with the | (or) operator 
print(movies.loc[(movies['Genre'] == 'Action') | (movies['Genre'] == 'Crime')])
#use the ".str.contains" to print a record that conatains a specific string
print(movies.loc[movies['Genre'].str.contains('Comedy')])
#use the tilda"~" and ".str.contains" to print all record that does not conatains the string "Comedy" 
print(movies.loc[movies['Genre'].str.contains('Comedy')])

#use the regex with ".str.contains" to print records that conatains multiple strings
print(movies.loc[movies['Genre'].str.contains('Comedy|Crime', regex=True)]) #case sensitive

#use the regex with ".str.contains" to print records that conatains multiple strings
#Use the "flags=re.I" method To ignore upper case 
print(movies.loc[movies['Genre'].str.contains('action|crime', flags=re.I, regex=True)])

#use the regex with ".str.contains" to print records that conatains multiple strings
#Use the "flags=re.I" method To ignore upper case 
#Use the "'^T[a-z]*'" method To print string that starts with letter T followed by any number of a-z lettere 
print(movies.loc[movies['Title'].str.contains('^T[a-z]*', flags=re.I, regex=True)])


# Conditional changes to change the value held in a field/column
movies.loc[movies['Genre'] == 'Action', 'Genre'] = 'Anime' 

print(movies)

#alter the value in a field that already exist if a condition is met
movies.loc[movies['Duration']> 105, ['Genre']] = 'Over 2 hrs long'
print(movies)


#create a new field and add a value to the newly created field if a condition is met
movies.loc[movies['Duration']> 105, ['Long']] = 'Over 2 hrs long'

print(movies)

# groupby aggregate
print(movies.groupby(['Duration']).mean())

# groupby aggregate
print(movies.groupby(['Duration']).mean().sort_values('Yr',ascending=True))

# groupby aggregate
print(movies.groupby(['Rating']).sum())

# groupby aggregate
# movies['Genre Total'] = 0 
print(movies.groupby(['Genre']).count())

print("This prints out single column")
#### prints the rating column only
# groupby aggregate 
movies['The Ratings'] = 0
print(movies.groupby(['Rating']).count()['The Ratings'])

#### prints the Genre column only
# groupby aggregate
movies['Genre Total'] = 0 
print(movies.groupby(['Genre']).count()['Genre Total'])

#### prints the Rating and Genre columns as it is useful for working with large data set
# groupby aggregate
movies['Total'] = 0 
print(movies.groupby(['Rating','Genre']).count()['Total'])